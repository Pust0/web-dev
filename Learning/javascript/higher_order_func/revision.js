
/*
------CLOSURE SCOPE------
WHENEVER A FUNCTION IS CREATED, ALL THE SCOPES THAT ARE AVAILABLE AT THE BIRTHPLACE OF THE INNER FUNCTION ARE CAPTURED BY THE
INNER FUNCTION AND THEY ARE AVAILABLE INSIDE THE INNER FUNCTION TILL THE INNER FUNCTION IS THERE IN MEMORY.
THIS IS INFINITELY NESTIBLE. IF THERE IS A INNER FUNCTION INSIDE A MIDDLE FUNCTION INSIDE A OUTER FUNCTION, THEN THE INNER FUNCTION WILL
CAPTURE THE SCOPE OF MIDDLE FUNCTION AS WELL AS OUTER FUNCTION. EVERY LEVEL OF SCOPE GETS CAPTURED LEVEL BY LEVEL.
*/

function outer(arg1){
   let var1 = 10
   function inner(arg2){
      let var2 = 20

      console.log(arg1, var1, arg2, var2  )
   }

   return inner
}

let x = outer('param1')

// typeof x == 'function'
// x == inner

x('param2')